method abs(x: Int) returns (r: Int)
  ensures x >= 0 ==> r == x
  ensures x <= 0 ==> r == -x
{
  if (x < 0) { r := -x } else { r := x }
}


method sum(n: Int) returns (res: Int)
  requires 0 <= n
  ensures  res == n * (n + 1) / 2
{
  res := 0
  var i: Int := 0
  while(i <= n)
    invariant i <= (n + 1)
    invariant res == (i - 1) * i / 2
  {
    res := res + i
    i := i + 1
  }
}

method triple(x: Int, flag: Bool) returns (r: Int) 
    ensures r == 3*x
{
    if (flag) {
        r := 3 * x
    } else {
        var y:Int 
        y := x + x
        r := x + y
    }
}

method complex(x: Int, flag: Bool) returns (r: Int) 
  ensures x >= 0 ==> r == 3*(x * (x + 1) / 2)
  ensures x < 0 ==> r ==  3*((-x) * (-x + 1) / 2)
{
    if (x < 0) {
        var y:Int 
        y := abs(x)
        r := sum(y)
    } else {
        r := sum(x)
    }
    r := triple(r, flag)
}